// <auto-generated />
using System;
using DiamondStore.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiamondStoreSystem.Core.Migrations
{
    [DbContext(typeof(DiamondStoreDbContext))]
    [Migration("20240527082125_diamondstore_v1")]
    partial class diamondstore_v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiamondStore.Data.Entities.Accessory", b =>
                {
                    b.Property<string>("AccessoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.HasKey("AccessoryID");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoyaltyPoint")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Diamond", b =>
                {
                    b.Property<string>("DiamondID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("CaratWeight")
                        .HasColumnType("real");

                    b.Property<int>("ClarityGrade")
                        .HasColumnType("int");

                    b.Property<int>("ColorGrade")
                        .HasColumnType("int");

                    b.Property<int>("CutGrade")
                        .HasColumnType("int");

                    b.Property<float>("DepthPercent")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FluoresceneGrade")
                        .HasColumnType("int");

                    b.Property<int>("GIAReportNumber")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("Inscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LabCreated")
                        .HasColumnType("int");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolishGrade")
                        .HasColumnType("int");

                    b.Property<int>("Shape")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SymmetryGrade")
                        .HasColumnType("int");

                    b.Property<float>("TablePercent")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("DiamondID");

                    b.ToTable("Diamonds");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("AccountID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quatity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("AccessoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.ProductDiamond", b =>
                {
                    b.Property<string>("ProductDiamondID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiamondID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiamondQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProductDiamondID");

                    b.HasIndex("DiamondID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductDiamonds");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Order", b =>
                {
                    b.HasOne("DiamondStore.Data.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("DiamondStore.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.HasOne("DiamondStore.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Product", b =>
                {
                    b.HasOne("DiamondStore.Data.Entities.Accessory", "Accessory")
                        .WithMany()
                        .HasForeignKey("AccessoryId");

                    b.Navigation("Accessory");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.ProductDiamond", b =>
                {
                    b.HasOne("DiamondStore.Data.Entities.Diamond", "Diamond")
                        .WithMany("ProductDiamonds")
                        .HasForeignKey("DiamondID");

                    b.HasOne("DiamondStore.Data.Entities.Product", "Product")
                        .WithMany("ProductDiamonds")
                        .HasForeignKey("ProductID");

                    b.Navigation("Diamond");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Account", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Diamond", b =>
                {
                    b.Navigation("ProductDiamonds");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DiamondStore.Data.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductDiamonds");
                });
#pragma warning restore 612, 618
        }
    }
}
