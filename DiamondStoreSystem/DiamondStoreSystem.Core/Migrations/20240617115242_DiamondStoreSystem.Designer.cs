// <auto-generated />
using System;
using DiamondStoreSystem.DTO.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiamondStoreSystem.Core.Migrations
{
    [DbContext(typeof(DiamondStoreDbContext))]
    [Migration("20240617115242_DiamondStoreSystem")]
    partial class DiamondStoreSystem
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Accessory", b =>
                {
                    b.Property<string>("AccessoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("AccessoryID");

                    b.ToTable("Accessories");

                    b.HasData(
                        new
                        {
                            AccessoryID = "A001",
                            AccessoryName = "Gold Ring",
                            Block = false,
                            Brand = "BrandA",
                            Description = "A beautiful gold ring",
                            Material = 2,
                            Price = 500.0,
                            Style = 0,
                            UnitInStock = 10
                        },
                        new
                        {
                            AccessoryID = "A002",
                            AccessoryName = "Silver Necklace",
                            Block = false,
                            Brand = "BrandB",
                            Description = "A shiny silver necklace",
                            Material = 4,
                            Price = 200.0,
                            Style = 0,
                            UnitInStock = 15
                        });
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoyaltyPoint")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Phone")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("WorkingSchedule")
                        .HasColumnType("int");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = "C001",
                            Address = "123 Main St",
                            Block = false,
                            DOB = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer1@example.com",
                            FirstName = "John",
                            Gender = 1,
                            JoinDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Doe",
                            LoyaltyPoint = 100,
                            Password = "password",
                            Phone = 1234567890m,
                            Role = 0,
                            WorkingSchedule = 1
                        },
                        new
                        {
                            AccountID = "E001",
                            Address = "456 Elm St",
                            Block = false,
                            DOB = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "employee1@example.com",
                            FirstName = "Jane",
                            Gender = 0,
                            JoinDate = new DateTime(2019, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Smith",
                            Password = "password",
                            Phone = 9876543210m,
                            Role = 1,
                            WorkingSchedule = 2
                        });
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Diamond", b =>
                {
                    b.Property<string>("DiamondID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<double>("CaratWeight")
                        .HasColumnType("float");

                    b.Property<int>("ClarityGrade")
                        .HasColumnType("int");

                    b.Property<int>("ColorGrade")
                        .HasColumnType("int");

                    b.Property<int>("CutGrade")
                        .HasColumnType("int");

                    b.Property<double>("DepthPercent")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FluoresceneGrade")
                        .HasColumnType("int");

                    b.Property<int>("GIAReportNumber")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Inscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LabCreated")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolishGrade")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shape")
                        .HasColumnType("int");

                    b.Property<int>("SymmetryGrade")
                        .HasColumnType("int");

                    b.Property<double>("TablePercent")
                        .HasColumnType("float");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("DiamondID");

                    b.ToTable("Diamonds");

                    b.HasData(
                        new
                        {
                            DiamondID = "D001",
                            Block = false,
                            CaratWeight = 1.5,
                            ClarityGrade = 8,
                            ColorGrade = 22,
                            CutGrade = 4,
                            DepthPercent = 60.0,
                            Description = "A beautiful diamond",
                            FluoresceneGrade = 4,
                            GIAReportNumber = 123456,
                            Height = 5.0,
                            Inscription = "GIA123456",
                            IssueDate = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LabCreated = 0,
                            Length = 5.0,
                            Origin = "South Africa",
                            PolishGrade = 4,
                            Price = 10000.0,
                            SKU = "SKU001",
                            Shape = 0,
                            SymmetryGrade = 4,
                            TablePercent = 55.0,
                            UnitInStock = 5,
                            Width = 5.0
                        });
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeAssignID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PayMethod")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("AccountID");

                    b.HasIndex("EmployeeAssignID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderID = "O001",
                            AccountID = "C001",
                            Block = false,
                            DateOrdered = new DateTime(2024, 6, 17, 18, 52, 41, 757, DateTimeKind.Local).AddTicks(5114),
                            EmployeeAssignID = "E001",
                            OrderStatus = 1,
                            PayMethod = 2,
                            TotalPrice = 10500.0
                        });
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("DiamondID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("AccessoryID");

                    b.HasIndex("DiamondID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailID = "OD001",
                            Block = false,
                            DiamondID = "D001",
                            OrderID = "O001",
                            Price = 10000.0,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailID = "OD002",
                            AccessoryID = "A001",
                            Block = false,
                            OrderID = "O001",
                            Price = 500.0,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Order", b =>
                {
                    b.HasOne("DiamondStoreSystem.DTO.Entities.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DiamondStoreSystem.DTO.Entities.Account", "EmployeeAccount")
                        .WithMany()
                        .HasForeignKey("EmployeeAssignID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("EmployeeAccount");
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.OrderDetail", b =>
                {
                    b.HasOne("DiamondStoreSystem.DTO.Entities.Accessory", "Accessory")
                        .WithMany("OrderDetails")
                        .HasForeignKey("AccessoryID");

                    b.HasOne("DiamondStoreSystem.DTO.Entities.Diamond", "Diamond")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DiamondID");

                    b.HasOne("DiamondStoreSystem.DTO.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID");

                    b.Navigation("Accessory");

                    b.Navigation("Diamond");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Accessory", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Account", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Diamond", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DiamondStoreSystem.DTO.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
