// <auto-generated />
using System;
using DiamondStoreSystem.DataLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiamondStoreSystem.DataLayer.Migrations
{
    [DbContext(typeof(DiamondStoreSystemDBContext))]
    [Migration("20240630081401_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Accessory", b =>
                {
                    b.Property<string>("AccessoryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Material")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.Property<int>("UnitInStock")
                        .HasColumnType("int");

                    b.HasKey("AccessoryID");

                    b.ToTable("Accessories");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LoyaltyPoint")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Phone")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("WorkingSchedule")
                        .HasColumnType("int");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Diamond", b =>
                {
                    b.Property<string>("DiamondID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<double>("CaratWeight")
                        .HasColumnType("float");

                    b.Property<int>("ClarityGrade")
                        .HasColumnType("int");

                    b.Property<int>("ColorGrade")
                        .HasColumnType("int");

                    b.Property<int>("CutGrade")
                        .HasColumnType("int");

                    b.Property<double>("DepthPercent")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FluoresceneGrade")
                        .HasColumnType("int");

                    b.Property<int>("GIAReportNumber")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Inscription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LabCreated")
                        .HasColumnType("int");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolishGrade")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shape")
                        .HasColumnType("int");

                    b.Property<int>("SymmetryGrade")
                        .HasColumnType("int");

                    b.Property<double>("TablePercent")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("DiamondID");

                    b.ToTable("Diamond");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeAssignID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PayMethod")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeAssignID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Product", b =>
                {
                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessoryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<string>("MainDiamondID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductID");

                    b.HasIndex("AccessoryID")
                        .IsUnique();

                    b.HasIndex("MainDiamondID")
                        .IsUnique();

                    b.HasIndex("OrderID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.SubDiamond", b =>
                {
                    b.Property<string>("SubDiamondID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubDiamondID");

                    b.HasIndex("ProductID");

                    b.ToTable("SubDiamonds");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.VnPaymentResponse", b =>
                {
                    b.Property<string>("VnpOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VnPayResponseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VnpOrderId");

                    b.ToTable("VnPaymentResponses");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Warranty", b =>
                {
                    b.Property<string>("WarrantyID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Block")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WarrantyID");

                    b.ToTable("Warranties");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Order", b =>
                {
                    b.HasOne("DiamondStoreSystem.DataLayer.Models.Account", "Customer")
                        .WithMany("OrdersCustomer")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiamondStoreSystem.DataLayer.Models.Account", "EmployeeAccount")
                        .WithMany("OrdersStaff")
                        .HasForeignKey("EmployeeAssignID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiamondStoreSystem.DataLayer.Models.VnPaymentResponse", null)
                        .WithOne("Order")
                        .HasForeignKey("DiamondStoreSystem.DataLayer.Models.Order", "OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("EmployeeAccount");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Product", b =>
                {
                    b.HasOne("DiamondStoreSystem.DataLayer.Models.Accessory", "Accessory")
                        .WithOne()
                        .HasForeignKey("DiamondStoreSystem.DataLayer.Models.Product", "AccessoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiamondStoreSystem.DataLayer.Models.Diamond", "MainDiamond")
                        .WithOne()
                        .HasForeignKey("DiamondStoreSystem.DataLayer.Models.Product", "MainDiamondID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiamondStoreSystem.DataLayer.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiamondStoreSystem.DataLayer.Models.Warranty", null)
                        .WithOne("Product")
                        .HasForeignKey("DiamondStoreSystem.DataLayer.Models.Product", "ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accessory");

                    b.Navigation("MainDiamond");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.SubDiamond", b =>
                {
                    b.HasOne("DiamondStoreSystem.DataLayer.Models.Product", "Product")
                        .WithMany("SubDiamonds")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DiamondStoreSystem.DataLayer.Models.Diamond", "Diamond")
                        .WithOne()
                        .HasForeignKey("DiamondStoreSystem.DataLayer.Models.SubDiamond", "SubDiamondID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Diamond");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Account", b =>
                {
                    b.Navigation("OrdersCustomer");

                    b.Navigation("OrdersStaff");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Product", b =>
                {
                    b.Navigation("SubDiamonds");
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.VnPaymentResponse", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondStoreSystem.DataLayer.Models.Warranty", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
